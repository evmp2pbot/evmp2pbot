start: >
  ---———— DISCLAIMER ————---


  ${disclaimer}

  ---———— DISCLAIMER ————---


  This bot will help you complete P2P token transactions.


  Once you start up the bot, you can use the following commands:


  1. Publish your order using the /buy or /sell command and follow the instructions.


  2. Wait for another user to pick your request using the "Buy" or "Sell" buttons. You can also pick other users' orders with these buttons!


  3. Your orders and reputation are visible in the ${channel} channel.


  4. If you are selling, the bot will publish the order in the ${channel} channel expecting another user will take it. You can cancel this sell order anytime BEFORE another user takes it with the /cancel command.


  5. Once somebody takes your order, the bot will ask you to send ${tokenName()} to an escrow address. The order will expire in a maximum lapse of ${orderExpiration} hours starting when the order was taken.


  The bot will reveal who the buyer is so you can send instructions for the FIAT payment to be made. Once you receive the FIAT payment, you must send the funds to the buyer using the /release command.


  6. If you want to buy, publish your order using the /buy command and wait until a seller takes it. You can cancel the order at any time by using the /cancel command.


  7. Once somebody takes your buy order, you must send your wallet address to the bot. After that, you need to contact your seller to get your FIAT payment instructions. Once you have paid the seller, you should use the /release command. The bot will send you the ${tokenName()} to your wallet address.


  8. If you are taking a selling order, i.e. you buy ${tokenName()}, you must send your wallet address to the bot and ask the seller to give you the FIAT payment instructions. Once the seller receives the fiat payment he shall use the /release command to have the ${tokenName()} sent to your wallet.


  9. If you are taking a buy order, i.e. you sell ${tokenName()}, you must send ${tokenName()} to an escrow address. These ${tokenName()} will be held until the buyer makes the fiat payment. You must contact the buyer and give him the info needed to proceed with the fiat payment. Once you receive the fiat payment, you must release the fund held by the bot; you must use the /release command, and the ${tokenName()} will be automatically sent to the buyer's wallet.


  Make a quick and safe transaction!
init_bot_error: to use this bot, you need to first initialize the boot with the command /start
non_handle_error: 👤 To use this bot, you need to activate your Telegram
  Username. To activate it open the hamburger menu on the top left and select
  settings -> edit profile -> username
invoice_payment_request: >
  An user wants to buy ${order.amount} $${tokenName()} for ${currency}
  ${order.fiat_amount}.


  Buyer:

  ${trades} successful trades

  ${pluralize(days, 'day', 'days')} using the bot


  Please deposit ${order.amount} $${tokenName()} into the following escrow account.

  This order will expire in ${expirationTime} minutes.
pending_sell: >
  Your offer is now active in the ${channel} channel.

  Please wait until an interested user picks up the offer.

  Otherwise it will expire in ${orderExpirationWindow} hours.


  You can cancel this order before a user picks it up by executing the command below 👇
cancel_order_cmd: |
  /cancel ${orderId}
pending_buy: >
  Your offer is now active in the ${channel} channel.

  Please wait until an interested user picks up the offer.

  Otherwise it will expire in ${orderExpirationWindow} hours.


  You can cancel this order before a user picks it up by executing the command below 👇
offer_header: 'Offer (:${id}:):'
must_be_int: ${fieldName} must be a number
must_be_numeric: ${fieldName} must be numeric
sats_amount: ${tokenName()} amount
fiat_amount: fiat amount
sell_correct_format: >
  /sell \<_sats amount_\> \<_fiat amount_\> \<_fiat code_\> \<_payment method_\>
  \[_premium/discount_\]


  In order to create a sell order of 1000 ${tokenName()} for 2 US dollars \(USD\) and indicate that the fiat payment is through transfer or ATM deposit, you must avoid \<\> and \[\]\.


  `/sell 1000 2 USD "transfer or ATM deposit"`


  In order to create a sale with a surplus in the price of 3% \(premium\) you need to add the parameter 0 indicating fiat amount\. The bot will calculate the selling price using the Bitcoin market price and applying the indicated surplus, you need to add 3 as the last parameter


  `/sell 0 2 USD "payment method" 3`


  In order to create a sell by range, instead of indicating a fixed fiat amount you can indicate a mininum and maximum amount to transact separated by a hyphen *\-*


  `/sell 0 100\-500 USD "payment method" 3`
buy_correct_format: >
  /buy \<_sats amount_\> \<_fiat amount_\> \<_fiat code_\> \<_payment method_\>
  \[_premium/discount_\]


  In order to create an order for 1000 ${tokenName()} for 2 \(USD\) and indicate that fiat payment is through transfer, you must to omit both \<\> and \[\]\.


  `/buy 1000 2 USD "online transfer"`


  If you do not want to establish a fixed amount of ${tokenName()} and you want to buy with a price under market value, you can place a buy order establishing a certain discount, such rate is the percentage that will be substracted of market price when your order is published\. You need to specify 0 at the \<_sats amount_\> field, the bot will calculate the price\. If you want to buy with a 2% discount on the price market, you should write \-2 as the last parameter


  `/buy 0 2 USD "payment method" \-2`


  If you want to create a purchase order by range instead of indicating a fixed Fiat amount, you can set the minimum and maximum to transact separated by a hyphen *\-*


  `/buy 0 100\-500 USD "payment method" \-2`
min_invoice_amount: invoice needs to be equal or higher than ${minPaymentAmount} ${tokenName()}
min_expiration_time: Time expiration for the invoice should be of at least ${expirationTime} minutes
invoice_expired: The invoice has expired
invoice_expired_long: >
  The invoice has expired. You can use the following command to send me a new
  invoice to receive the ${tokenName()} 👇
setinvoice_cmd_order: |
  /setinvoice ${orderId} \\<Lightning Invoice\\>
invoice_require_destination: Invoice needs a receiver address
invoice_require_hash: Invoice needs a hash
order_id_invalid: Invalid order ID
order_invalid_type: This ${type} order is invalid
order_already_taken: This order has already been taken by another user.
invalid_data: You have sent invalid data, try again.
begin_take_buy: >
  Press Continue to take the offer, if you press Cancel, you will be released
  from the order and it will be republished. You have ${expirationTime} minutes
  before this order expires. 👇
continue: Continue
accept: Accept
cancel: Cancel
pay_invoice: Please pay this invoice of ${amount} ${tokenName()} for ${currency}
  ${fiatAmount} to start the operation.
payment_received: >
  🤑 Payment received!


  Now I need the buyer to send an invoice so I can send ${tokenName()} to his/her wallet. I will put you both in touch as soon as the buyer sends the invoice


  Wait a bit. The collateral will be returned to you if the buyer does not cooperate.
someone_took_your_order: >
  Someone took your order and already sent me the ${tokenName()}, please use
  a fiat payment processor that allows you to send the money immediately and in
  which there is no risk of freezing funds.


  If, for any reason, your payment processor puts the payment on pause and the funds do not arrive in less than ${expirationTime}, the ${tokenName()} will return to the seller, putting the buyer at risk. I cannot force the seller to send the ${tokenName()} again.


  Seller Reputation: ${rate}, days using the bot: ${days}


  If you agree with the above, press the button to continue 👇
you_took_someone_order: >
  You took the sell order ${order._id}


  Selling ${order.amount} $${tokenName()}

  For ${order.fiat_amount} ${order.fiat_code}

  Pay via ${order.payment_method}


  Please use a fiat payment processor that allows you to send *${order.fiat_amount} ${order.fiat_code}* immediately and in which there is no risk of freezing funds\\.


  If, for any reason, your payment processor puts the payment on pause and the funds do not arrive in less than ${expirationTime} hours, the *${order.amount}* $${tokenName()} will return to the seller, putting the buyer at risk and I cannot force the seller to send the ${tokenName()} again\\.


  If you agree with the above, press the Accept button to continue 👇
get_in_touch_with_seller: >
  Order ID: #${orderId}


  Get in touch with the seller, user @${sellerUsername} to get the details on how to send the ${fiatAmount} ${currency} using ${paymentMethod}.

  Once you send the money, please confirm here by typing this command 👇
fiatsent_order_cmd: /fiatsent
get_in_touch_with_buyer: >
  Order ID: #${orderId}


  Get in touch with @${buyerUsername} to give information on how to send you ${currency} ${fiatAmount} through ${paymentMethod}. Do not release those ${tokenName()} until you verify that the buyer paid you the fiat.


  Once you confirm the reception of the money, you must unlock the ${tokenName()}.
buyer_took_your_order: >
  Order ID: #${orderId}


  @${buyerUsername} has picked up your order and wants to buy ${order.amount} $${tokenName()}.

  Get in touch via DM and share instructions on how to send you ${currency} ${fiatAmount} through ${paymentMethod}.

  Once you received the full amount, you have to release the ${order.amount} $${tokenName()} from the escrow.
waiting_seller_to_pay: 'I have sent a payment request to the seller so he sends
  your ${tokenName()} for the order ID #${orderId}, as soon as payment is made I
  will put you both in touch'
received_less_than_expected: I received less than ${amount} ${tokenName()} for
  order ${orderId} in the escrow wallet address, please send ${diff} more
  ${tokenName()} to continue.
sell_success: >
  Your exchange has been completed. 

  Please qualify @${buyerUsername}
funds_released: >
  @${sellerUsername} already released the ${order.amount} $${tokenName()} from escrow. You can expect the tokens in your wallet any minute now.
rate_counterpart: '-👇-'
cant_process_order: This order cannot be processed, please check the ID is correct.
cant_release_order: This order cannot be released, the buyer has not sent an invoice where to pay
no_id_related: You do not have any order associated with this ID.
sell_sats: Sell ${tokenName()} for ${fiatAmount} ${currency}
buy_sats: Buy ${tokenName()} for ${fiatAmount} ${currency}
order_detail: |
  ID: `${order._id}`

  Status: ${status}

  Creator: @${creator || ''}

  Buyer: @${buyerUsername || ''}

  Buyer reputation: ${buyerReputation}

  Seller: @${sellerUsername || ''}

  Seller reputation: ${sellerReputation}

  Order Amount \\(${tokenName()}\\): ${order.amount}

  Bot Fee \\(${tokenName()}\\): ${fee}

  Routing Fee \\(${tokenName()}\\): ${order.routing_fee}

  Fiat Amount \\(fiat\\) ${order.fiat_code}: ${order.fiat_amount}

  Order payment method: ${paymentMethod}

  Premium/discount: ${priceMargin}

  Created: ${createdAt}

  Taken: ${takenAt || ''}

  seller invoice hash: `${order.hash || ''}`

  seller invoice secret: `${order.secret || ''}`

  buyer payment request: `${order.buyer_invoice || ''}`
seller: seller
buyer: buyer
dispute_started_channel: >
  User ${type} @${initiatorUser.username} 

  has started a dispute with @${counterPartyUser.username} for the order


  ${detailedOrder}


  @${initiatorUser.username} has been involved in ${initiatorUser.disputes} disputes

  @${counterPartyUser.username} has been involved in ${counterPartyUser.disputes} disputes
you_started_dispute_to_buyer: 🥴 You have started a dispute for your buy order,
  we will contact you and your counterparty to sort it out.
buyer_started_dispute_to_seller: '🥴 The buyer has initiated a dispute for your
  order with ID: ${orderId}, we will contact you and your counterparty to
  resolve it.'
you_started_dispute_to_seller: 🥴 You have started a dispute for your sell
  order, we will contact you and your counterparty to sort it out.
seller_started_dispute_to_buyer: '🥴 The Seller has initiated a dispute for your
  order with ID: ${orderId}, we will contact you and your counterparty to
  resolve it.'
must_be_valid_currency: 'Fiat_code must be a valid code, for example: USD, EUR.
  Check the full list with the command /listcurrencies'
must_be_number_or_range: Fiat_amount must be a number or numeric range in
  the  <minimum>-<maximum> format
invalid_lightning_address: Invalid lightning address
unavailable_lightning_address: Unavailable lightning address ${la}
help: >
  /sell <_sats amount_> <_fiat amount_> <_fiat code_> <_payment method_>
  [premium/discount] - Creates a Sell order

  /buy <_sats amount_> <_fiat amount_> <_Fiat code_> <_payment method_> [premium/discount] - Creates a Purchase Order

  /takeorder <_order id_> - Allows the user to take an order from the chat with the bot without going to the channel where it was published

  /info - Shows additional info about the bot

  /showusername - Toggles off the username display in each new order created. Default value is set to false

  /showvolume - Shows trade volume when each order is created, default value is false

  /setinvoice <_order id_> <_lightning invoice_> - This command allows the buyer to update the lightning invoice where to receive the ${tokenName()} 

  /setaddress <_lightning address / off_> - Allows the buyer to establish a static payment address (lightning address), _off_ to deactivate 

  /setlang - Allows the user to change the language

  /settings - Displays the user's current settings

  /listorders - Use this command to list all your pending transactions 

  /listcurrencies - Lists all the currencies we can use to without indicatin the amount in ${tokenName()}. 

  /fiatsent <_order id_> - Buyer informs that he has already sent FIAT money to seller

  /release <_order id_> - Seller releases ${tokenName()} 

  /dispute <_order id_> - Opens a dispute between participant parties

  /disclaimer - Displays disclaimer

  /cancel <_order id_> - Cancel an order that has not been taken yet

  /cancelall - Cancel all posted and untaken orders

  /disclaimer - Shows the terms and conditions when using the bot


  Nostr:

  /setnpub <_nostr npub_> - Updates your nostr pubkey, this command is only executable in the /settings wizard

  /nostr - Shows the bot's nostr pubkey and the relays used to publish


  Communities:

  /community - Create a new community

  /mycomms - Shows the communities you have created

  /mycomm <_@community_> - Enter Community Admin Wizard

  /findcomms <_fiat code_> - Finds communities that operate with the indicated currency

  /setcomm <_@groupOfACommunity / off_> - Set a default community or remove it with 'off'

  /settleorder <_order id_> - Accept the seller's payment and automatically send the ${tokenName()} to the buyer, there must be a community by default

  /cancelorder <_id orden_> - Cancels the order which returns the ${tokenName()} to the seller, there must be a community by default

  /deldispute <_username_> <_id order_> - Deletes a dispute from the user in the community, there must be a community by default

  /ban <_username_> - Ban a user from a community, there should be a default community

  /unban <_username_> - Unban a user from a community, there should be a default community


  /version - Shows the current version of the bot

  /help - Help messages
must_be_gt_or_eq: ${fieldName} Must be greater or equal to ${qty}
you_have_been_banned: You have been banned!
run_start_first: I haven't seen you before, please run /start first.
I_told_seller_you_sent_fiat: >
  @${sellerUsername} has been notified that you have sent the ${order.fiat_amount} ${order.fiat_code} using ${order.payment_method}\\. 

  Once @${sellerUsername} confirms the money was received, the ${order.amount} $${tokenName()} will be released from escrow and sent to your wallet `${order.buyer_invoice}`
buyer_told_me_that_sent_fiat: >
  @${buyerUsername} has informed me that the ${order.fiat_amount} ${order.fiat_code} was sent using ${order.payment_method}. Once you receive it please release the ${order.amount} $${tokenName()} from the escrow. You will not be able to create another order until this order has been completed.
release_order_cmd: /release
you_have_orders_waiting: you have one or more orders where the buyer informs
  that the fiat money was sent to you but you haven't released the
  ${tokenName()} yet. You will not be able to create new orders until you
  release such funds.
user_banned: Banned user!
user_unbanned: Unbanned user!
user_not_found: User was not found in the database!
parse_invoice_error: Error parsing invoice
invalid_id: Invalid ID
cant_take_own_order: You cannot take your own order.
send_me_lninvoice: Please send me a lightning invoice for ${amount}
  ${tokenName()}, although to make things easier for you, I also accept invoices
  without a specified amount. I will make the payment of ${amount}
  ${tokenName()}.
you_have_no_orders: You don't have active orders
not_rate_for_currency: >
  ${fiatRateProvider} There is no exchange rate for this currency,

  if you want to use this currency, you must indicate how many ${tokenName()} you want

  If you woud like this currency in the listing, go to this link to place a request. 👇


  🌐 https://yadio.io/api.html
invoice_with_incorrect_amount: the amount stated in the invoice is incorrect
invoice_updated: 📝 Invoice has been correctly updated!
invoice_updated_and_will_be_paid: Invoices has been correctly updated and will be paid in the next few seconds!
invoice_already_being_paid: You have alreday send an invoice for this order and
  I am trying to pay it in this very right moment.
lightning_address_saved: Lightning address has been saved
cancel_error: This order cannot be cancelled at this moment
cancel_success: 'You have cancelled the order ID: ${orderId}!'
cancelall_success: You have cancelled all your published orders!
order_cancelled_by_admin: 'Admin has cancelled the order ID: ${orderId}!'
order_completed: 'You have completed the order ID: ${orderId}!'
order_completed_by_admin: 'Admin has completed the order ID: ${orderId}!'
order_cancelled_by_counterparty: 'Your counterparty cancelled the order ID: ${orderId}!'
have_to_wait_for_counterpart: 🕒 You have already made this operation, you must
  wait for the other party to take action
ok_cooperativecancel: '👍 Counterparty agreed and the order ID: ${orderId} has been cancelled'
refund_cooperativecancel: 💰 You have received a refund of your lightning
  payment, there is no further action to make
init_cooperativecancel: '🕒 You have started the cancellation of the order ID:
  ${orderId}, your counterparty must agree on the cancellation too.'
counterparty_wants_cooperativecancel: '😳 Your counterparty wants to cancel
  order ID: ${orderId}. If you agree on such cancellation, please execute the
  following command 👇'
invoice_payment_failed: ⛔ I tried to send you the ${tokenName()} but the payment
  of your invoice failed, I will try ${attempts} more times in
  ${pendingPaymentWindow} minutes window, please check your node/wallet is
  online
cant_take_more_orders: ⛔ Sorry! You can't take another order while you have others waiting for you
seller_released: 💸 Seller has already released the ${tokenName()}, you must
  wait for your invoice to be paid.
your_purchase_is_completed: >
  Your exchange has been completed. 

  Please qualify @${sellerUsername}
problem_getting_price: There is a problem accessing this coin's price, please
  try later. If the problem persists, please get in touch with an administrator.
update_user_setting: I have modify the field ${field} to ${newState}
lightning_address_disabled: Lightning address disabled
invalid_range_with_amount: >
  Ranges are only available for floating rates


  Use ranges or specify the number of ${tokenName()}, but do not write both of them
too_many_pending_orders: You have reached the maximum amount of orders that can
  be published simultaneously
name: Name
group: Group
channel: Channel
solver: Solver
published: Published
created: Created
yes: Yes
no: No
wizard_add_invoice_init: >
  Please share the wallet address to receive the ${satsAmount}
  $${tokenName()} tokens that you will receive for your ${currency} ${fiatAmount}.


  If you do not send the address within ${expirationTime} minutes the order will be cancelled.
wizard_add_invoice_exit: >
  You have exited wizard mode, you can now write down the commands and add an
  invoice to the order with the command /setinvoice indicating Order ID and
  Invoice. You may send me an invoice for ${amount} ${tokenName()}, but I also
  accept invoices with no amount specified:


  `/setinvoice ${orderId} `\\<lightning invoice with or without amount\\>
wizard_community_enter_name: Pick a name for your community
wizard_community_too_long_name: The name can have a maximum length of ${length} characters.
wizard_community_enter_currency: Enter the code of the fiat currency(ies) with
  which users can operate in this community, if there is more than one you must
  enter each code separated by a blank space.
wizard_community_enter_group: >
  Pick an ID or a name for the group, the bot and you must be group
  administrators:


  i.e: @MyCommunity
wizard_community_enter_order_channels: >
  All orders of your community must be published in a telegram channel, if you
  indicate me only one channel both Buy and Sell orders will be published there.


  If you indicate two channels, Buy orders will be place in one and Sell orders in the other. Both you and the bot must be administrators in both channels.


  Please indicate the name of the channel, or in case you want to use two chanels, indicate both names separated by a space.


  i.e : @MyCommunitySell  @MyCommunityBuy
wizard_community_one_or_two_channels: You must indicate either one or two channels
wizard_community_enter_solvers: Now please write down the names of the users
  that will sort out disputes, each of them separated by a space.
wizard_community_must_enter_names: You must add at least one name, or two separated by a space
wizard_community_enter_solvers_channel: Indicate the ID or name of the channel
  that the bot must use to alert when a dispute is called, please use @ at the
  beginning of the channel name.
wizard_community_success: >
  Congratulations, you have created your community!


  In order for your community to remain active it must have successfully completed orders in the last ${days} days.
wizard_community_wrong_permissions: You do not have administrator permits for this group or channel
wizard_community_you_are_not_admin: You are not admin on ${channel}.
wizard_community_duplicated_name: The name you entered is already in use by
  another community, try again with a different one.
wizard_to_exit: '(/exit to abort at any step)'
wizard_exit: You have exited wizard mode, you can now write commands
wizard_add_fiat_amount: |
  Please indicate the amount of ${currency} you want to ${action}.

  Remember it must be only numbers and be between ${minAmount} and ${maxAmount}:
wizard_add_fiat_wrong_amount: Invalid amount, input must be between ${minAmount}
  and ${maxAmount}, it must be only numbers.
wizard_add_fiat_correct_amount: 'Amount: ${currency} ${fiatAmount}.'
order_expired: This order has expired!
cant_add_invoice: You can no longer add an invoice to this order!
expired_order: |
  This order has expired without completion

  ${detailedOrder}

  @${sellerUser.username} has ${sellerUser.disputes} disputes
  @${buyerUser.username} has ${buyerUser.disputes} disputes
expired_order_to_buyer: >
  🚨🚨🚨 This order is about to expire and must be completed or cancelled
  immediately, if you haven't sent the fiat money yet, you can still cancel with
  the /cancel command.


  If you sent the fiat money but the seller refuses to release the ${tokenName()}, you can open a dispute with the /dispute command. The hold invoice that the seller paid has an expiration time and you must resolve this order before it expires or you risk losing your money.


  If you need help, you can write to the group ${helpGroup}
expired_order_to_seller: >
  🚨🚨🚨 This order is about to expire and must be completed or cancelled
  immediately, if you haven't received the fiat money yet, you can still cancel
  with the /cancel command.


  If you received the fiat money please release the funds with the /release command, otherwise you are at risk of the buyer opening a dispute which will affect your reputation.


  If you need help, you can write to the group ${helpGroup}
didnt_add_invoice: '🤨 You have not sent the invoice to receive ${tokenName()}
  for the order ID: ${orderId}'
buyer_havent_add_invoice: '😔 Buyer has not sent me the invoice to receive the
  ${tokenName()} for your order ID: ${orderId}, your ${tokenName()} were sent
  back to you'
buyer_havent_add_invoice_to_admin_channel: 'Buyer @${username} took the order
  ID: ${orderId} but has not sent the invoice where to receive ${tokenName()},
  time has expired, the order has being republished.'
havent_paid_invoice: '🤨 You have not paid the invoice to sell ${tokenName()}
  for the order ID: ${orderId}'
seller_havent_paid_invoice: '😔 Seller has not paid the invoice for your
  purchase ID: ${orderId}, the operation was cancelled.'
seller_havent_add_invoice_to_admin_channel: 'Seller @${username} has not paid
  the invoice of order ID: ${orderId} time lapse ended and the order has been
  published again.'
pending_payment_success_to_admin: >
  User @${username} had a pending invoice, the payment for buying order ID:
  ${orderId} for ${amount} ${tokenName()}, was finally executed after
  ${attempts} attempts.


  Proof of payment: ${paymentSecret}
pending_payment_success: >
  I have paid the lightning invoice for ${amount} ${tokenName()}, order ID:
  ${id}!


  Proof of payment: ${paymentSecret}
pending_payment_failed: >
  I have tried to pay your invoice ${attempts} times and failed. Sometimes
  the Lightning Network users can't receive payments because their wallet has
  not enough inbound liquidity or the node is not well connected in the network.
  You might want to try to generate an invoice from another wallet.
pending_payment_failed_to_admin: >
  Payment of the invoice for the Buy order ${orderId} of user @${username} has
  failed.


  Payment attempts: ${attempts}
wizard_header: >
  Post an offer to ${action} $${tokenName()} Tokens on ${chainName}:


  Preview:

buying: Buying
selling: Selling
receive_payment: Receive payment via
pay: Pay
pay_via: Pay via
is: is
trading_volume: 'Trading volume: ${volume} ${tokenName()}'
by: by
rate: Rate
has_successful_trades: ${trades} successful trades
user_age: ${pluralize(days, 'day', 'days')} using the bot
price: Price
for: For
generic_error: An error occurred
sats: ${tokenName()}
no_capital_letters: You are trying to execute a command with the first letter
  capitalized. Please write the entire command in lowercase.
unknown_command: 😕 I do not understand. Please use /help to see the list of available commands
invoice_invalid_error: >
  Error parsing the invoice. Please copy-paste a lightning invoice starting with
  'lnbc'.


  If you want to abort and return to the command entering mode just run /exit
invoice_expiry_too_short_error: Invoice expiry is too short
invoice_has_expired_error: Invoice has expired
invoice_has_wrong_destination_error: Invoice has a wrong destination
invoice_must_be_larger_error: Invoice must be for at least ${minInvoice} ${tokenName()}
hours: hours
minutes: minutes
community_updated: Community successfully updated
operation_successful: Operation successful!
select_community: Select the community
what_modify: What do you want to modify?
channels: Channels
dispute_solvers: Solvers
no_default_community: You no longer have a community by default
community_not_found: Community not found
currency: Currency
currencies: Currencies
currency_not_supported: >
  This currency cannot be used in this community, it is only allowed to use
  [${currencies}].


  You can leave this community executing /setcomm off
press_to_continue: Press the button to continue
receive: receive
send: send
new_dispute: ⚠️⚠️⚠️ A user has started a dispute, press the button to take it
take_dispute: Take dispute
not_authorized: 🤨 You are not authorized to perform this operation
need_default_community: To perform this operation, you need to have a default community
enter_sats_amount: >
  Step 3 of 4:

  How many $${tokenName()} tokens would you like to receive for ${fiatAmount} ${currency}.

  Only full numbers and no fractions please.
market_price: Market price
enter_currency: >
  Step 1 of 4:

  Enter a currency code e.g.: USD
choose_currency: Choose a currency
enter_currency_amount: >
  Step 2 of 4:

  Enter the amount of ${currency} you want to pay.

  Only full numbers and no fractions please.

enter_premium_discount: Enter the premium(+) or discount(-) to apply to the market price.
no_premium_or_discount: No premium or discount
enter_payment_method: >
  Step 4 of 4:

  How will you pay the ${fiatAmount} ${currency}?

  (PayPal, Sepa Wire, SWIFT Wire, Venmo,...)
invalid_currency: Invalid currency
not_number: It must be a number
not_zero: Cannot be 0 (zero)
not_negative: Cannot be a negative number
wizard_community_wrong_percent: The percentage must be between 0 and 100
wizard_community_enter_fee_percent: >
  Enter the fee:


  The fee in a community is variable and is indicated as a percentage from 0 to 100. If you do not want to charge a fee, indicate 0. If you want to charge half of the maximum value, indicate 50, if you want it to have the maximum value, indicate 100.
fee: Fee
use_default: Use by default
orders: Orders
volume: Volume
users: Users
not_found_dispute: There is no dispute for this order
max_allowed: The maximum allowed is ${max}
dispute_channel: Dispute channel
not_wizard: You are not in wizard mode at the moment, if you have doubts you can type /help
wizard_help: You are in wizard mode, if you need to go back to command mode run /exit
hold_invoice_memo: '@${botName} - Escrow amount Order #${orderId}: SELL BTC for
  ${fiatCode} ${fiatAmount} - It WILL FREEZE IN YOUR WALLET. It will release
  once you run /release. It will return if buyer does not confirm the payment'
tap_button: Select an order to perform the operation
tap_fiatsent: Please select for what specific order you made a payment
tap_release: Select the order to release the funds, once you press the button,
  the operation cannot be reversed.
earnings: Earnings
premium: Premium
discount: Discount
premium_discount: premium/discount
withdraw_earnings: Withdraw earnings
invoice_expired_earnings: The invoice has expired, resubmit a withdrawal request with a new invoice.
what_to_do: What do you want to do?
community: Community
seller_already_released: Don't worry, the seller has already released the funds 🥲
select_language: Select language
must_enter_text: You must enter only text
current_earnings: |
  Orders completed so far in the community: ${ordersToRedeem}

  Community Earnings: ${earnings} ${tokenName()}
you_dont_have_communities: You have no communities created
users_added: 'You have added: ${users}'
users_not_added: 'Could not add to: ${users}; please make sure these users have started the bot'
delete_community: Delete community
are_you_sure: Are you sure?
no_permission: You do not have permission to perform this operation
make_public: Make public
make_private: Make private
bot_kicked: bot was kicked from the chat, it must be a member and admin
chat_not_found: Chat not found. Are you sure you added the bot to the group/channel?
not_member: You are not a member of that chat
upgraded_to_supergroup: The chat was upgraded to 'supergroup' and the ID has
  changed, check the chat ID again
community_deleted: This community was deleted due to inactivity. I have unlinked
  you from it, try to create the order again
dispute_too_soon: You can't start a dispute too soon, be patient and wait a few
  minutes for your counterparty to reply
maintenance: 🚨 Bot in maintenance, please try again later 🚨
community_admin: |
  <strong>Community Admin Mode</strong>
  > ${community.name} (${community.group})

  Public:
    ${community.public ? 'Yes' : 'No'}
  Fee:
    ${community.fee}
  Earnings:
    ${community.earnings}
  npub:
    <code>${community.nostr_public_key || ''}</code>

  /help - help messages.
  /exit - to exit the wizard.
community_admin_help: >
  <strong>Community Admin Mode</strong>

  # commands


  /setnpub &lt;npub&gt; - Configure community's public key. Nostr events will be tagged with this public key.
community_npub_updated: You added the community's pubkey ${npub} successfully!
user_npub_updated: You added your pubkey ${npub} successfully!
nostr_info: |
  npub:
  <code>${npub}</code>

  hex:
  <code>${publicKey}</code>

  relays:
  ${relays}
npub_not_valid: >
  Not a valid <a
  href="https://github.com/nostr-protocol/nips/blob/master/19.md">NIP-19</a>
  npub. Please check your input.

  Example:

  /setnpub npub180cvv07tjdrrgpa0j7j7tmnyl2yr6yr7l8j4s3evf6u64th6gkwsyjh6w6
order_not_found: Order not found.
user_settings: >
  <strong>User settings for @${user.username}</strong>


  Language:
    ${language.emoji} ${language.name}
  Community:
    ${community || '🛇'}
  npub:
    <code>${npub || '🛇'}</code>
  lightning address:
    <code>${lightning_address || '🛇'}</code>

  <strong># HELP</strong>

  /setnpub &lt;npub&gt; - Configure user public key. Nostr events will be tagged with this public key.

  /exit - to exit the wizard.
invoice_settled: Invoice already settled
invoice_cancelled: Invoice cancelled
invoice_held: Invoice held
invoice_no_info: I don't have information for that invoice
bot_info: |
  Bot fee: ${bot_fee}

  Max routing fee: ${routing_fee}

  Node URI: `${node_uri}`

  Node status: ${status}

  User info:

  ${user_info}
user_info: |
  Volume traded: ${volume_traded}
  Total rating: ${total_rating}
  Disputes: ${disputes}
disclaimer: >
  *By using the P2P trade bot, you agree to the following terms and conditions:*


  The bot is an open-source software that is available for anyone to use, copy, modify, and run. The developers are not responsible for the actions of other individuals using the software in any manner, whether legal or illegal, honest or dishonest.


  The bot is provided on an "as is" and "as available" basis, and the developers make no warranties of any kind, express or implied, with respect to the bot or its use.


  The developers and the dispute resolvers make their best efforts to remove bad actors, frauds, and scams from using the bot, but the user recognizes that the system can be exploited and accepts full responsibility while using it.


  Neither the developers nor the dispute resolvers are responsible for any losses or damages that the user may suffer as a result of using the bot.
order_frozen: You have frozen the order
